== Table function lib ==

Table function lib was created for my own work projects involving photometry, colorimetry, some sort of mathematical modelling of optical systems.

It's written on Delphi but should also work on Cylix/ Lazarus, but I haven't checked it yet, sorry :(

=== Changelog ===

'''v. 0.73'''
* ''derivative'' and ''integral'' procedures added. They change the function into it's derivative or definite integral (from xmin to x) respectively. 
* second order interpolation added. IT'S NOT RECOMMENDED TO USE IT! In fact, it was introduced to demonstrate to my boss that second order interpolation is bad idea!

'''v. 0.72'''
* decimal separator from local settings is used, so now AT LAST this procedure works on any computer, with any decimal separator used in file. 

'''v. 0.71'''
* return value is zero if x value is not in domain of function

''' v. 0.70'''
* ''Draw'' procedure uses minimal and maximum X values of chart if they are defined manually
* in ''Draw'' procedure number of points now is fixed: 1280, to look normally on most screens. It's not so good idea, but it works.
* New, ''ini''-like data format available, to store additional information, not just (x,y) values.
* Bugfix in ''update_spline'': ''changed'' was set to false only if order=3. Now it is set to false in any case.

''' v. 0.63'''
* Serious mistakes were fixed:
** ''Integrate'' function now checks ''changed'', if it is ''true'', calls ''update_spline''.
** ''Assign'' procedure sets ''changed'' to ''true'' just in case.
** ''normalize'' procedure checks if maximal value is greater than zero. If it is not, no normalization occurs.
* ''morepoints'' procedure added, it doubles number of points in the table.

''' v. 0.62'''
* Private boolean  ''changed'' variable introduced, it is set to ''true'' if the function changed and to ''false'' after calling update_spline. So, if lots of points are added, no computation occurs until someobody calls ''value''.

'''v. 0.61'''
* '' Clear ''  procedure added, it clears all the data, but leaves ''chart_series'' the same

''' v. 0.6 '''
* unused variables from '' addpoint '' procedure were removed
* from now, the value of empty table function is NaN
* '' table_func '' is now descendant of '' TPersistent '', '' Assign '' procedure to assign one table function to another one. 
* '' addpoint '' bug fixed: it could add the points with same X value, resulting in division by zero in '' update_spline ''. Now if point with same X value added, it replaces the previous one.
* ''multiply(by) procedure added: it multiplies table function by another table function or just by a constant value (Real). 
* '' integrate '' function added: it takes definite integral over entire domain of function

''' v. 0.53 '''
* ''constructor'' now have overloaded version Create(Filename) to load function from file once the instance was created.
* ''chart_series'' property and ''draw'' procedure added, to automatically draw the function on TeeChart component.

''' v. 0.52 '''
* ''addpoint(x,y)'' procedure added, it does exactly what it says. And re-calculate splines afterwards.
* ''enabled'' property added, it is ''true'' if there is at least one point in the table.

''' v. 0.51 '''
* access violation bug fixed in ''update_spline'' procedure. The value of ''for'' counter used after the for loop, so it was unstable.
* ''Constructor'' changed to have ''order'' initially set to 3 (cubic interpolation) instead of 0 (stairs)

''' v. 0.5 '''
* zero-order ("stairs"), first-order ("lines") and third-order (cubic splines) interpolation available. It can be changed at any time by setting ''order'' property
* ''step'' property added, it shows minimal difference between x values. It's useful to automatically set step for integration or something like that.
* ''normalize'' method added, it divides whole function by its maximal value, so resulting function (if it was non-negative) lies between 0 and 1

=== Description ===

The main features of this lib:

* Class "table_func" is defined. You can make an instance of that class and work with it like it's just a mathematical function:

<pre>
 var y: table_func;
 result: Real;
 ...

 y:=table_func.Create('example.txt');
 result:=y[1.56];

 ...

 y.Free;
</pre>

Note that once the table was loaded from file, spline coefficients are automatically computed, so line "result=y[1.56]" is valid and returns good approximation no matter whether value of function at 1.56 really is in the table or not.

You can do something like that:
<pre>
var v,solar_spectrum: table_func;
lux: Real;

...

v:=table_func.Create('luminosity_curve.txt'); //sensitivity of human eye, curve that defines photometry units such as Lumen, Candela  etc.

solar_spectrum.Create('solar_spectrum.txt'); //solar spectral irradiance, W cm^-2 nm^ -1 (at distance 1 a.u, that is, near Earth)

solar_spectrum.multiply(v);
lux:=solar_spectrum.integrate; //We found illuminance of sun in space near Earth
...

 v.free;
solar_spectrum.free;
</pre>

* Simple loading from file and saving to file. There are 2 supported file formats. 
Plain text format: just two columns separated by tabs or spaces or commas or semicolons, whatever. Something like that:
<pre>
0	0
1	1
2	0
3	-1
4	0
</pre>

Ini file format: has 3 sections: general, description and data. Here is example:

<pre>
[general]
title=Solar Spectrum
Xname=Wavelength
Yname=Spectral irradiance
Xunit=nm
Yunit=W*(cm)^-2*(um)^-1
order=1
[description]
Data taken from "Planets As Background Noise in Free Space Optical Communications"
[data]
120	1E-5
140	3E-6
150	7E-6
160	2,3E-5
170	6,3E-5
180	0,000125
190	0,000271
200	0,00107
210	0,00229
220	0,00575
225	0,00649
230	0,00667
....
</pre>

Such a file is very useful because it contains not only points of data but some additional information. Using special fields for units in x and y values could be of great use to control whether result is of correct unit or not, or even automatically convert nm to um or just meters if needed. But such functionality wasn't implemented yet.

There is example:

<pre>
var s: table_func;

...
s:=table_func.Create;
s.order:=1; //order of interpolation. 
//Order 0 means stairs-like graph: after each point the y value just remains unchanged till the next point	
//order 1 means connecting points by straight lines
//order 2: quadratic parabole interpolation, pretty useless. Was implemented to show my boss how useless it is. DON'T USE IT!
//order 3 is set by default, it's cubic spline interpolation: Each segment between points is cubic parabole, coefficient are computed so, that the whole function has no gaps, so is its first derivative. At the end points additional conditions are set: the second derivative is equal to zero. 

s.title:='Solar Spectrum';
s.Xname:='Wavelength';
s.Yname:='Spectral irradiance';
s.Xunit:='nm';
s.Yunit:='W*(cm)^-2*(um)^-1';
s.description:='Data taken from "Planets As Background Noise in Free Space Optical Communications"';

s.addpoint(120, 1E-5);
s.addpoint(230, 0,00667);
s.addpoint(140, 3E-6); //you can add points at random order. 
...

s.SaveToFile('Solar_Spectrum.txt');
s.free;
</pre>
